{"version":3,"sources":["components/styles.module.scss","utils/transmit-radio.ts","components/timer.svg","components/DeviceControls.tsx","App.tsx","serviceWorker.ts","index.tsx","App.module.scss"],"names":["module","exports","hoursToMilliseconds","hours","requestInFlight","transmitSignal","deviceNumber","signal","Promise","resolve","data","message","axios","get","params","timeout","finally","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Views","createElement","d","_ref","svgRef","title","props","viewBox","enableBackground","ref","ForwardRef","forwardRef","CustomTimer","onClickClose","onClickConfirm","React","customTimer","setCustomTimer","className","styles","inputContainer","input","type","onChange","event","value","parseInt","isNaN","classnames","on","check","onClick","off","close","DeviceControls","onSuccess","onFailure","Default","currentView","setCurrentView","resolvePromise","promise","then","res","catch","err","handleClickOn","handleClickOff","selectTimer","setTimedOperation","handleClickTimer","CommonTimers","handleClickCustom","closeTimerView","DefaultButtons","timer","RenderButtons","container","buttonContainer","App","useState","status","setStatus","setTimer","setTimedStatus","clearTimeout","setTimeout","handleSuccess","handleFailure","error","console","log","show","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79880077.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1ofZB\",\"buttonContainer\":\"styles_buttonContainer__2nyFb\",\"timer\":\"styles_timer__3lcTT\",\"on\":\"styles_on__2whL9\",\"off\":\"styles_off__30Ub8\",\"close\":\"styles_close__3dB7m\",\"inputContainer\":\"styles_inputContainer__2J0EA\",\"input\":\"styles_input__3FM1k\"};","import axios, { AxiosResponse } from \"axios\";\n\nfunction hoursToMilliseconds(hours: number) {\n  return hours * 60 * 60 * 1000;\n}\n\nlet requestInFlight = false;\n\nexport function transmitSignal(deviceNumber: number, signal: \"on\" | \"off\", hours?: number) {\n  if (requestInFlight)\n    return Promise.resolve<AxiosResponse>({\n      data: { message: \"Transmit signal already in flight\" },\n    } as AxiosResponse);\n  requestInFlight = true;\n\n  return axios\n    .get(\"http://raspberrypi.local:3000/transmit/\", {\n      params: {\n        deviceNumber,\n        signal,\n        timeout: hours && hoursToMilliseconds(hours)\n      }\n    })\n    .finally(() => {\n      requestInFlight = false;\n    });\n}\n\nexport function setTimedOperation(deviceNumber: number, hours: number) {\n  return transmitSignal(deviceNumber, 'on', hours)\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m167.364,48.003v-23.003h10.5c6.903,0 12.5-5.597 12.5-12.5s-5.596-12.5-12.5-12.5h-59.5c-6.903,0-12.5,5.597-12.5,12.5s5.597,12.5 12.5,12.5h10.5v23.003c-59.738,9.285-105.604,61.071-105.604,123.37-3.55271e-15,68.845 56.01,124.854 124.854,124.854s124.854-56.01 124.854-124.854c0-62.299-45.866-114.085-105.604-123.37zm-19.25,223.225c-55.06,0-99.854-44.795-99.854-99.854s44.795-99.854 99.854-99.854 99.854,44.795 99.854,99.854-44.794,99.854-99.854,99.854z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m160.614,166.18v-58.889c0-6.903-5.597-12.5-12.5-12.5s-12.5,5.597-12.5,12.5v66.1c0,2.033 0.81,3.982 2.25,5.416l34.969,34.822c4.893,4.872 12.806,4.854 17.678-0.037 4.871-4.892 4.854-12.807-0.037-17.678l-29.86-29.734z\"\n}));\n\nvar SvgTimer = function SvgTimer(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 296.228 296.228\",\n    enableBackground: \"new 0 0 296.228 296.228\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTimer, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/timer.69f9f45e.svg\";\nexport { ForwardRef as ReactComponent };","import * as React from \"react\";\nimport { AxiosResponse, AxiosError } from \"axios\";\nimport { transmitSignal, setTimedOperation } from \"../utils/transmit-radio\";\nimport styles from \"./styles.module.scss\";\nimport { ReactComponent as Timer } from \"./timer.svg\";\nimport classnames from \"classnames\";\n\nenum Views {\n  Default = \"default\",\n  CommonTimers = \"common_timers\",\n  CustomTimer = \"custom_timer\",\n}\n\ninterface CustomTimerProps {\n  onClickClose: () => void;\n  onClickConfirm: (hours: number) => void;\n}\n\nconst CustomTimer: React.SFC<CustomTimerProps> = ({\n  onClickClose,\n  onClickConfirm,\n}) => {\n  const [customTimer, setCustomTimer] = React.useState(1);\n  function handleChangeCustomTimer(event: React.ChangeEvent<HTMLInputElement>) {\n    const value = parseInt(event.target.value);\n    if (isNaN(value) || value < 0) {\n      setCustomTimer(0);\n    }\n    setCustomTimer(value);\n  }\n\n  function handleClickConfirm() {\n    onClickConfirm(customTimer);\n  }\n\n  return (\n    <>\n      <div className={styles.inputContainer}>\n        <input\n          className={styles.input}\n          type=\"number\"\n          onChange={handleChangeCustomTimer}\n          value={customTimer}\n        />{\" \"}\n        hrs\n      </div>\n      <button\n        className={classnames(styles.on, styles.check)}\n        onClick={handleClickConfirm}\n      >\n        &#10003;\n      </button>\n      <button\n        className={classnames(styles.off, styles.close)}\n        onClick={onClickClose}\n      >\n        &times;\n      </button>\n    </>\n  );\n};\n\ninterface Props {\n  deviceNumber: number;\n  onSuccess?: (res: AxiosResponse) => void;\n  onFailure?: (error: AxiosError) => void;\n}\n\nexport const DeviceControls: React.SFC<Props> = ({\n  deviceNumber,\n  onSuccess,\n  onFailure,\n}) => {\n  const [currentView, setCurrentView] = React.useState(Views.Default);\n\n  function resolvePromise(promise: ReturnType<typeof transmitSignal>) {\n    promise\n      .then((res) => {\n        onSuccess && onSuccess(res);\n      })\n      .catch((err) => {\n        onFailure && onFailure(err);\n      });\n  }\n\n  function handleClickOn() {\n    resolvePromise(transmitSignal(deviceNumber, \"on\"));\n  }\n\n  function handleClickOff() {\n    resolvePromise(transmitSignal(deviceNumber, \"off\"));\n  }\n\n  function selectTimer(hours: number) {\n    resolvePromise(setTimedOperation(deviceNumber, hours));\n    setCurrentView(Views.Default);\n  }\n\n  function handleClickTimer() {\n    setCurrentView(Views.CommonTimers);\n  }\n\n  function handleClickCustom() {\n    setCurrentView(Views.CustomTimer);\n  }\n\n  function closeTimerView() {\n    setCurrentView(Views.Default);\n  }\n\n  const DefaultButtons = () => {\n    return (\n      <>\n        <button className={styles.timer} onClick={handleClickTimer}>\n          <Timer />\n        </button>\n        <button className={styles.on} onClick={handleClickOn}>\n          On\n        </button>\n        <button className={styles.off} onClick={handleClickOff}>\n          Off\n        </button>\n      </>\n    );\n  };\n\n  const CommonTimers = () => {\n    return (\n      <>\n        <button className={styles.timer} onClick={() => selectTimer(1)}>\n          1hr\n        </button>\n        <button className={styles.timer} onClick={() => selectTimer(2)}>\n          2hrs\n        </button>\n        <button className={styles.timer} onClick={() => selectTimer(4)}>\n          4hrs\n        </button>\n        <button className={styles.timer} onClick={() => selectTimer(8)}>\n          8hrs\n        </button>\n        <button className={styles.timer} onClick={handleClickCustom}>\n          ...\n        </button>\n        <button\n          className={classnames(styles.off, styles.close)}\n          onClick={closeTimerView}\n        >\n          &times;\n        </button>\n      </>\n    );\n  };\n\n  const RenderButtons = () => {\n    switch (currentView) {\n      case Views.CommonTimers:\n        return <CommonTimers />;\n      case Views.CustomTimer:\n        return (\n          <CustomTimer\n            onClickClose={closeTimerView}\n            onClickConfirm={selectTimer}\n          />\n        );\n      case Views.Default:\n      default:\n        return <DefaultButtons />;\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <h1>Device #{deviceNumber}</h1>\n      <div className={styles.buttonContainer}>\n        <RenderButtons />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './App.module.scss';\nimport { DeviceControls } from './components/DeviceControls';\nimport { AxiosResponse, AxiosError } from 'axios';\nimport classnames from 'classnames';\n\nfunction App() {\n  const [status, setStatus] = React.useState('')\n  const [timer, setTimer] = React.useState<NodeJS.Timeout | null>(null)\n  const setTimedStatus = (message: string) => {\n    if (timer) {\n      clearTimeout(timer)\n    }\n    setStatus(message)\n    setTimer(setTimeout(() => {\n      setStatus('')\n    }, 1500))\n  }\n  const handleSuccess = (res: AxiosResponse) => {\n    setTimedStatus(res.data.message)\n  }\n\n  const handleFailure = (error: AxiosError) => {\n    console.log(error)\n    setTimedStatus('Oh no! Something went wrong...')\n  }\n\n  return (\n    <div>\n      <DeviceControls deviceNumber={1} onSuccess={handleSuccess} onFailure={handleFailure} />\n      <DeviceControls deviceNumber={2} onSuccess={handleSuccess} onFailure={handleFailure} />\n      <DeviceControls deviceNumber={3} onSuccess={handleSuccess} onFailure={handleFailure} />\n      <div className={classnames(styles.status, status && styles.show)}>{status}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"App_status__o722g\",\"show\":\"App_show__3DqLF\"};"],"sourceRoot":""}