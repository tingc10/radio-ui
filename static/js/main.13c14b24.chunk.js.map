{"version":3,"sources":["components/styles.module.scss","App.module.scss","utils/transmit-radio.ts","components/DeviceControls.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","requestInFlight","transmitSignal","deviceNumber","signal","Promise","resolve","data","message","axios","get","params","finally","DeviceControls","onSuccess","onFailure","className","styles","container","on","onClick","then","res","catch","err","off","App","React","useState","status","setStatus","setTimedStatus","setTimeout","handleSuccess","handleFailure","error","console","log","classnames","show","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iIACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,GAAK,mBAAmB,IAAM,sB,uCCAtFD,EAAOC,QAAU,CAAC,OAAS,oBAAoB,KAAO,oB,6HCClDC,GAAkB,EAEf,SAASC,EAAeC,EAAsBC,GACnD,OAAIH,EACKI,QAAQC,QAAuB,CACpCC,KAAM,CAAEC,QAAS,wCAErBP,GAAkB,EAEXQ,IACJC,IAAI,oCAAqC,CACxCC,OAAQ,CACNR,eACAC,YAGHQ,SAAQ,WACPX,GAAkB,M,oBCRXY,EAAmC,SAAC,GAI1C,IAHLV,EAGI,EAHJA,aACAW,EAEI,EAFJA,UACAC,EACI,EADJA,UAsBA,OACE,uBAAKC,UAAWC,IAAOC,WACrB,qCAAaf,GACb,0BAAQa,UAAWC,IAAOE,GAAIC,QAvBlC,WACElB,EAAeC,EAAc,MAC1BkB,MAAK,SAACC,GACLR,GAAaA,EAAUQ,MAExBC,OAAM,SAACC,GACNT,GAAaA,EAAUS,QAiBzB,MAGA,0BAAQR,UAAWC,IAAOQ,IAAKL,QAhBnC,WACElB,EAAeC,EAAc,OAC1BkB,MAAK,SAACC,GACLR,GAAaA,EAAUQ,MAExBC,OAAM,SAACC,GACNT,GAAaA,EAAUS,QAUzB,S,iBCTSE,MA3Bf,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACNC,EADM,KACEC,EADF,KAEPC,EAAiB,SAACvB,GACtBsB,EAAUtB,GACVwB,YAAW,WACTF,EAAU,MACT,OAECG,EAAgB,SAACX,GACrBS,EAAeT,EAAIf,KAAKC,UAGpB0B,EAAgB,SAACC,GACrBC,QAAQC,IAAIF,GACZJ,EAAe,mCAGjB,OACE,6BACE,kBAAC,EAAD,CAAgB5B,aAAc,EAAGW,UAAWmB,EAAelB,UAAWmB,IACtE,kBAAC,EAAD,CAAgB/B,aAAc,EAAGW,UAAWmB,EAAelB,UAAWmB,IACtE,kBAAC,EAAD,CAAgB/B,aAAc,EAAGW,UAAWmB,EAAelB,UAAWmB,IACtE,yBAAKlB,UAAWsB,IAAWrB,IAAOY,OAAQA,GAAUZ,IAAOsB,OAAQV,KChBrDW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAY,GACLC,QAAQD,MAAMA,EAAM3B,c","file":"static/js/main.13c14b24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1ofZB\",\"on\":\"styles_on__2whL9\",\"off\":\"styles_off__30Ub8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"App_status__o722g\",\"show\":\"App_show__3DqLF\"};","import axios, { AxiosResponse } from \"axios\";\n\nlet requestInFlight = false;\n\nexport function transmitSignal(deviceNumber: number, signal: \"on\" | \"off\") {\n  if (requestInFlight)\n    return Promise.resolve<AxiosResponse>({\n      data: { message: \"Transmit signal already in flight\" },\n    } as AxiosResponse);\n  requestInFlight = true;\n\n  return axios\n    .get(\"http://raspberrypi:3000/transmit/\", {\n      params: {\n        deviceNumber,\n        signal,\n      }\n    })\n    .finally(() => {\n      requestInFlight = false;\n    });\n}\n","import * as React from \"react\";\nimport { AxiosResponse, AxiosError } from \"axios\";\nimport { transmitSignal } from \"../utils/transmit-radio\";\nimport styles from \"./styles.module.scss\";\n\ninterface Props {\n  deviceNumber: number;\n  onSuccess?: (res: AxiosResponse) => void;\n  onFailure?: (error: AxiosError) => void;\n}\n\nexport const DeviceControls: React.SFC<Props> = ({\n  deviceNumber,\n  onSuccess,\n  onFailure,\n}) => {\n  function handleClickOn() {\n    transmitSignal(deviceNumber, \"on\")\n      .then((res) => {\n        onSuccess && onSuccess(res);\n      })\n      .catch((err) => {\n        onFailure && onFailure(err);\n      });\n  }\n\n  function handleClickOff() {\n    transmitSignal(deviceNumber, \"off\")\n      .then((res) => {\n        onSuccess && onSuccess(res);\n      })\n      .catch((err) => {\n        onFailure && onFailure(err);\n      });\n  }\n\n  return (\n    <div className={styles.container}>\n      <h1>Device #{deviceNumber}</h1>\n      <button className={styles.on} onClick={handleClickOn}>\n        On\n      </button>\n      <button className={styles.off} onClick={handleClickOff}>\n        Off\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './App.module.scss';\nimport { DeviceControls } from './components/DeviceControls';\nimport { AxiosResponse, AxiosError } from 'axios';\nimport classnames from 'classnames';\n\nfunction App() {\n  const [status, setStatus] = React.useState('')\n  const setTimedStatus = (message: string) => {\n    setStatus(message)\n    setTimeout(() => {\n      setStatus('')\n    }, 1500)\n  }\n  const handleSuccess = (res: AxiosResponse) => {\n    setTimedStatus(res.data.message)\n  }\n\n  const handleFailure = (error: AxiosError) => {\n    console.log(error)\n    setTimedStatus('Oh no! Something went wrong...')\n  }\n\n  return (\n    <div>\n      <DeviceControls deviceNumber={1} onSuccess={handleSuccess} onFailure={handleFailure} />\n      <DeviceControls deviceNumber={2} onSuccess={handleSuccess} onFailure={handleFailure} />\n      <DeviceControls deviceNumber={3} onSuccess={handleSuccess} onFailure={handleFailure} />\n      <div className={classnames(styles.status, status && styles.show)}>{status}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}